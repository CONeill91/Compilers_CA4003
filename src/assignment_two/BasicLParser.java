package assignment_two;/* BasicLParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. BasicLParser.java */
import java.io.*;
import java.util.*;

public class BasicLParser/*@bgen(jjtree)*/implements BasicLParserTreeConstants, BasicLParserConstants {/*@bgen(jjtree)*/
  protected static JJTBasicLParserState jjtree = new JJTBasicLParserState();
        public static void main(String [] args){
        String temp;
        STC temp2;
        BasicLParser parser;
        if(args.length == 0){
            System.out.println("BasicLParser: Reading from Standard Input...");
            parser = new BasicLParser(System.in);
        }
        else if(args.length == 1){
            System.out.println("BasicLParser: Reading from file " + args[0] + "...");
            try{
                parser = new BasicLParser(new FileInputStream(args[0]));
            }
            catch(FileNotFoundException e){
                System.out.println(": File " + args[0] + "  not found");
                return;
            }
        }
        else{
            return;
        }


        try{
                    //parser.program();
                SimpleNode root = parser.program();
                    System.out.println("Abstract Syntax Tree:");
                    //root.dump(">");
                FunctionCheckVisitor funcVis = new FunctionCheckVisitor();
                root.jjtAccept(funcVis,null);
                //VariableCheckVisitor varVis = new VariableCheckVisitor();
                //root.jjtAccept(varVis,null);
                ThreeAddressGenVisitor threeAddressGenVisitor = new ThreeAddressGenVisitor();
                root.jjtAccept(threeAddressGenVisitor,null);






                }
        catch(ParseException e)
        {
          System.out.print(e.getMessage());
        }
        }

  static final public SimpleNode program() throws ParseException {/*@bgen(jjtree) program */
  ASTprogram jjtn000 = new ASTprogram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CONST:
        case VAR:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        decl();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOL:
        case INT:
        case VOID:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        function();
      }
      main_prog();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void decl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      var_decl();
      break;
      }
    case CONST:{
      const_decl();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void var_decl() throws ParseException {/*@bgen(jjtree) var_decl */
  ASTvar_decl jjtn000 = new ASTvar_decl(JJTVAR_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VAR);
      ident_list();
      jj_consume_token(COLON);
      type();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        ident_list();
        jj_consume_token(COLON);
        type();
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void const_decl() throws ParseException {/*@bgen(jjtree) const_decl */
  ASTconst_decl jjtn000 = new ASTconst_decl(JJTCONST_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CONST);
      identifier();
      jj_consume_token(COLON);
      type();
      jj_consume_token(EQUALS);
      expression();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        identifier();
        jj_consume_token(COLON);
        type();
        jj_consume_token(EQUALS);
        expression();
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void function() throws ParseException {/*@bgen(jjtree) function */
  ASTfunction jjtn000 = new ASTfunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      type();
      identifier();
      jj_consume_token(LPAREN);
      param_list();
      jj_consume_token(RPAREN);
      jj_consume_token(BEGIN);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CONST:
        case VAR:{
          ;
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          break label_5;
        }
        decl();
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:
        case SEMICOLON:
        case IF:
        case WHILE:
        case BEGIN:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_6;
        }
        statement();
        jj_consume_token(SEMICOLON);
      }
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:
      case LPAREN:
      case FALSE:
      case TRUE:
      case NUMBER:
      case IDENTIFIER:{
        expression();
        break;
        }
      default:
        jj_la1[7] = jj_gen;

      }
      jj_consume_token(SEMICOLON);
      jj_consume_token(END);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void functionCall() throws ParseException {/*@bgen(jjtree) FunctionCall */
  ASTFunctionCall jjtn000 = new ASTFunctionCall(JJTFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      identifier();
      jj_consume_token(LPAREN);
      arg_list();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void param_list() throws ParseException {/*@bgen(jjtree) param_list */
  ASTparam_list jjtn000 = new ASTparam_list(JJTPARAM_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        identifier();
        jj_consume_token(COLON);
        type();
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[8] = jj_gen;
            break label_7;
          }
          jj_consume_token(COMMA);
          identifier();
          jj_consume_token(COLON);
          type();
        }
        break;
        }
      default:
        jj_la1[9] = jj_gen;
jjtree.closeNodeScope(jjtn000, true);
                                                                                   jjtc000 = false;

      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void type() throws ParseException {/*@bgen(jjtree) type */
  ASTtype jjtn000 = new ASTtype(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        jj_consume_token(INT);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
jjtn000.value = token;
        break;
        }
      case BOOL:{
        jj_consume_token(BOOL);
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
jjtn000.value = token;
        break;
        }
      case VOID:{
        jj_consume_token(VOID);
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
jjtn000.value = token;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void main_prog() throws ParseException {/*@bgen(jjtree) main_prog */
  ASTmain_prog jjtn000 = new ASTmain_prog(JJTMAIN_PROG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MAIN);
      jj_consume_token(BEGIN);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CONST:
        case VAR:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_8;
        }
        decl();
      }
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:
        case SEMICOLON:
        case IF:
        case WHILE:
        case BEGIN:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_9;
        }
        statement();
        jj_consume_token(SEMICOLON);
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void statement() throws ParseException {/*@bgen(jjtree) statement */
  ASTstatement jjtn000 = new ASTstatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_1(2)) {
        identifier();
        jj_consume_token(ASSIGN);
jjtn000.value = token;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:{
          jj_consume_token(LPAREN);
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        expression();
ASTassignment jjtn001 = new ASTassignment(JJTASSIGNMENT);
                                                                                              boolean jjtc001 = true;
                                                                                              jjtree.openNodeScope(jjtn001);
        try {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case RPAREN:{
            jj_consume_token(RPAREN);
            break;
            }
          default:
            jj_la1[14] = jj_gen;
            ;
          }
        } finally {
if (jjtc001) {
                                                                                                jjtree.closeNodeScope(jjtn001,  2);
                                                                                              }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          functionCall();
          break;
          }
        case BEGIN:{
          jj_consume_token(BEGIN);
          label_10:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case LPAREN:
            case SEMICOLON:
            case IF:
            case WHILE:
            case BEGIN:
            case IDENTIFIER:{
              ;
              break;
              }
            default:
              jj_la1[15] = jj_gen;
              break label_10;
            }
            statement();
            jj_consume_token(SEMICOLON);
          }
          jj_consume_token(END);
          break;
          }
        case LPAREN:
        case IF:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LPAREN:{
            jj_consume_token(LPAREN);
            break;
            }
          default:
            jj_la1[16] = jj_gen;
            ;
          }
          jj_consume_token(IF);
          condition();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case RPAREN:{
            jj_consume_token(RPAREN);
            break;
            }
          default:
            jj_la1[17] = jj_gen;
            ;
          }
          jj_consume_token(THEN);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LPAREN:{
            jj_consume_token(LPAREN);
            break;
            }
          default:
            jj_la1[18] = jj_gen;
            ;
          }
          statement();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case RPAREN:{
            jj_consume_token(RPAREN);
            break;
            }
          default:
            jj_la1[19] = jj_gen;
            ;
          }
          jj_consume_token(SEMICOLON);
          jj_consume_token(ELSE);
          statement();
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          if (jj_2_2(3)) {
            jj_consume_token(WHILE);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case LPAREN:{
              jj_consume_token(LPAREN);
              break;
              }
            default:
              jj_la1[20] = jj_gen;
              ;
            }
            condition();
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case RPAREN:{
              jj_consume_token(RPAREN);
              break;
              }
            default:
              jj_la1[21] = jj_gen;
              ;
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case AND:
            case OR:{
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case AND:{
                jj_consume_token(AND);
                break;
                }
              case OR:{
                jj_consume_token(OR);
                break;
                }
              default:
                jj_la1[22] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              condition();
              break;
              }
            default:
              jj_la1[23] = jj_gen;
              ;
            }
            jj_consume_token(DO);
            statement();
          } else {
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;

          }
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void expression() throws ParseException {
    if (jj_2_3(2)) {
      fragment();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:
        case MINUS:
        case MULTIPLY:
        case DIVIDE:{
          ;
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          break label_11;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:{
          jj_consume_token(PLUS);
          fragment();
ASTaddExpr jjtn001 = new ASTaddExpr(JJTADDEXPR);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
          try {
jjtree.closeNodeScope(jjtn001,  2);
                           jjtc001 = false;
jjtn001.value = new Token(PLUS, tokenImage[PLUS]);
          } finally {
if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  2);
                           }
          }
          break;
          }
        case MINUS:{
          jj_consume_token(MINUS);
          fragment();
ASTminusExpr jjtn002 = new ASTminusExpr(JJTMINUSEXPR);
                            boolean jjtc002 = true;
                            jjtree.openNodeScope(jjtn002);
          try {
jjtree.closeNodeScope(jjtn002,  2);
                            jjtc002 = false;
jjtn002.value = new Token(MINUS, tokenImage[MINUS]);
          } finally {
if (jjtc002) {
                              jjtree.closeNodeScope(jjtn002,  2);
                            }
          }
          break;
          }
        case MULTIPLY:{
          jj_consume_token(MULTIPLY);
          fragment();
ASTmultExpr jjtn003 = new ASTmultExpr(JJTMULTEXPR);
                               boolean jjtc003 = true;
                               jjtree.openNodeScope(jjtn003);
          try {
jjtree.closeNodeScope(jjtn003,  2);
                               jjtc003 = false;
jjtn003.value = new Token(MULTIPLY, tokenImage[MULTIPLY]);
          } finally {
if (jjtc003) {
                                 jjtree.closeNodeScope(jjtn003,  2);
                               }
          }
          break;
          }
        case DIVIDE:{
          jj_consume_token(DIVIDE);
          fragment();
ASTdivExpr jjtn004 = new ASTdivExpr(JJTDIVEXPR);
                             boolean jjtc004 = true;
                             jjtree.openNodeScope(jjtn004);
          try {
jjtree.closeNodeScope(jjtn004,  2);
                             jjtc004 = false;
jjtn004.value = new Token(DIVIDE, tokenImage[DIVIDE]);
          } finally {
if (jjtc004) {
                               jjtree.closeNodeScope(jjtn004,  2);
                             }
          }
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        jj_consume_token(LPAREN);
        expression();
        jj_consume_token(RPAREN);
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        if (jj_2_4(2)) {
          functionCall();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void fragment() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:
    case MINUS:
    case FALSE:
    case TRUE:
    case NUMBER:
    case IDENTIFIER:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        identifier();
        break;
        }
      case TRUE:{
        jj_consume_token(TRUE);
ASTbool jjtn001 = new ASTbool(JJTBOOL);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
        try {
jjtree.closeNodeScope(jjtn001, true);
                jjtc001 = false;
jjtn001.value = token;
        } finally {
if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                }
        }
        break;
        }
      case FALSE:{
        jj_consume_token(FALSE);
ASTbool jjtn002 = new ASTbool(JJTBOOL);
                 boolean jjtc002 = true;
                 jjtree.openNodeScope(jjtn002);
        try {
jjtree.closeNodeScope(jjtn002, true);
                 jjtc002 = false;
jjtn002.value = token;
        } finally {
if (jjtc002) {
                   jjtree.closeNodeScope(jjtn002, true);
                 }
        }
        break;
        }
      case NUMBER:{
        jj_consume_token(NUMBER);
ASTnumber jjtn003 = new ASTnumber(JJTNUMBER);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
        try {
jjtree.closeNodeScope(jjtn003, true);
                  jjtc003 = false;
jjtn003.value = token;
        } finally {
if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003, true);
                  }
        }
        break;
        }
      case PLUS:
      case MINUS:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:{
          jj_consume_token(PLUS);
          break;
          }
        case MINUS:{
          jj_consume_token(MINUS);
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        fragment();
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(RPAREN);
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void condition() throws ParseException {/*@bgen(jjtree) condition */
  ASTcondition jjtn000 = new ASTcondition(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_5(3)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:{
          jj_consume_token(LPAREN);
          break;
          }
        default:
          jj_la1[31] = jj_gen;
          ;
        }
        expression();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQUALS:{
          jj_consume_token(EQUALS);
          break;
          }
        case NOT_EQUALS:{
          jj_consume_token(NOT_EQUALS);
          break;
          }
        case LESS_THAN:{
          jj_consume_token(LESS_THAN);
          break;
          }
        case GREATER_THAN:{
          jj_consume_token(GREATER_THAN);
          break;
          }
        case LESS_THAN_OREQUAL:{
          jj_consume_token(LESS_THAN_OREQUAL);
          break;
          }
        case GREATER_THAN_OREQUAL:{
          jj_consume_token(GREATER_THAN_OREQUAL);
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        expression();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RPAREN:{
          jj_consume_token(RPAREN);
          break;
          }
        default:
          jj_la1[33] = jj_gen;
          ;
        }
        condition();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOT:{
          jj_consume_token(NOT);
          condition();
          break;
          }
        case IDENTIFIER:{
          functionCall();
          break;
          }
        default:
          jj_la1[36] = jj_gen;
          label_12:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case AND:
            case OR:{
              ;
              break;
              }
            default:
              jj_la1[34] = jj_gen;
              break label_12;
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case AND:{
              jj_consume_token(AND);
              break;
              }
            case OR:{
              jj_consume_token(OR);
              break;
              }
            default:
              jj_la1[35] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            condition();
          }
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  static final public void ident_list() throws ParseException {/*@bgen(jjtree) ident_list */
  ASTident_list jjtn000 = new ASTident_list(JJTIDENT_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      identifier();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[37] = jj_gen;
          break label_13;
        }
        jj_consume_token(COMMA);
        identifier();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void arg_list() throws ParseException {/*@bgen(jjtree) arg_list */
  ASTarg_list jjtn000 = new ASTarg_list(JJTARG_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        identifier();
        label_14:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[38] = jj_gen;
            break label_14;
          }
          jj_consume_token(COMMA);
          identifier();
        }
        break;
        }
      default:
        jj_la1[39] = jj_gen;
jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;

      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void identifier() throws ParseException {/*@bgen(jjtree) identifier */
                     ASTidentifier jjtn000 = new ASTidentifier(JJTIDENTIFIER);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
jjtn000.value = token;
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_3R_26()
 {
    return false;
  }

  static private boolean jj_3R_38()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    }
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_25()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_38()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_24()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_23()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(21)) jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) return true;
    }
    }
    }
    }
    }
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_32()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_43()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) return true;
    }
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_42()
 {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3R_41()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_40()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_39()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_37()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_19()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    return false;
  }

  static private boolean jj_3R_31()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_36()
 {
    if (jj_scan_token(DIVIDE)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_35()
 {
    if (jj_scan_token(MULTIPLY)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_34()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_33()
 {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_30()
 {
    return false;
  }

  static private boolean jj_3R_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3_4()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_scan_token(WHILE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(21)) jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) jj_scanpos = xsp;
    if (jj_scan_token(DO)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_19()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(21)) jj_scanpos = xsp;
    if (jj_scan_token(IF)) return true;
    return false;
  }

  static private boolean jj_3R_28()
 {
    if (jj_scan_token(BEGIN)) return true;
    return false;
  }

  static private boolean jj_3R_27()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_46()
 {
    return false;
  }

  static private boolean jj_3R_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_15()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_21()
 {
    if (jj_3R_15()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_17()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    }
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_15()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_45()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_44()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public BasicLParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[40];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000000,0x40000000,0x80000000,0x800000,0x800000,0x80000000,0x1200000,0x201800,0x800000,0x0,0x40000000,0x80000000,0x1200000,0x200000,0x400000,0x1200000,0x200000,0x400000,0x200000,0x400000,0x200000,0x400000,0x20000000,0x20000000,0x200000,0x7800,0x7800,0x200000,0x1800,0x1800,0x201800,0x200000,0x1f8000,0x400000,0x20000000,0x20000000,0x0,0x800000,0x800000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x800,0x1010,0x800,0x0,0x0,0x800,0x26008,0x30404,0x0,0x20000,0x1010,0x800,0x26008,0x0,0x0,0x26008,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x80,0x24008,0x0,0x0,0x0,0x0,0x30404,0x30404,0x0,0x0,0x0,0x80,0x80,0x20040,0x0,0x0,0x20000,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[5];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public BasicLParser(InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public BasicLParser(InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new BasicLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public BasicLParser(Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new BasicLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public BasicLParser(BasicLParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(BasicLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private List<int[]> jj_expentries = new ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[54];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 40; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 54; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
