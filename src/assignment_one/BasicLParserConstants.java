package assignment_one;/* Generated By:JavaCC: Do not edit this line. BasicLParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface BasicLParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 5;
  /** RegularExpression Id. */
  int AND = 11;
  /** RegularExpression Id. */
  int BOOL = 12;
  /** RegularExpression Id. */
  int CONST = 13;
  /** RegularExpression Id. */
  int DO = 14;
  /** RegularExpression Id. */
  int ELSE = 15;
  /** RegularExpression Id. */
  int FALSE = 16;
  /** RegularExpression Id. */
  int IF = 17;
  /** RegularExpression Id. */
  int INT = 18;
  /** RegularExpression Id. */
  int MAIN = 19;
  /** RegularExpression Id. */
  int NOT = 20;
  /** RegularExpression Id. */
  int OR = 21;
  /** RegularExpression Id. */
  int RETURN = 22;
  /** RegularExpression Id. */
  int THEN = 23;
  /** RegularExpression Id. */
  int TRUE = 24;
  /** RegularExpression Id. */
  int VAR = 25;
  /** RegularExpression Id. */
  int VOID = 26;
  /** RegularExpression Id. */
  int WHILE = 27;
  /** RegularExpression Id. */
  int BEGIN = 28;
  /** RegularExpression Id. */
  int END = 29;
  /** RegularExpression Id. */
  int ID = 30;
  /** RegularExpression Id. */
  int DIGIT = 31;
  /** RegularExpression Id. */
  int LETTER = 32;
  /** RegularExpression Id. */
  int UNDERSCORE = 33;
  /** RegularExpression Id. */
  int NUMBER = 34;
  /** RegularExpression Id. */
  int PLUS = 35;
  /** RegularExpression Id. */
  int MINUS = 36;
  /** RegularExpression Id. */
  int MULTIPLY = 37;
  /** RegularExpression Id. */
  int DIVIDE = 38;
  /** RegularExpression Id. */
  int EQUALS = 39;
  /** RegularExpression Id. */
  int NOT_EQUALS = 40;
  /** RegularExpression Id. */
  int LESS_THAN = 41;
  /** RegularExpression Id. */
  int GREATER_THAN = 42;
  /** RegularExpression Id. */
  int LESS_THAN_OR_EQUAL = 43;
  /** RegularExpression Id. */
  int GREATER_THAN_OR_EQUAL = 44;
  /** RegularExpression Id. */
  int LBR = 45;
  /** RegularExpression Id. */
  int RBR = 46;
  /** RegularExpression Id. */
  int COMMA = 47;
  /** RegularExpression Id. */
  int SEMI_COLON = 48;
  /** RegularExpression Id. */
  int COLON = 49;
  /** RegularExpression Id. */
  int ASSIGNMENT = 50;
  /** RegularExpression Id. */
  int EPSILON = 51;
  /** RegularExpression Id. */
  int OTHER = 52;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"/*\"",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 4>",
    "<SINGLE_LINE_COMMENT>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\f\"",
    "\"\\r\"",
    "\"and\"",
    "\"bool\"",
    "\"const\"",
    "\"do\"",
    "\"else\"",
    "\"false\"",
    "\"if\"",
    "\"int\"",
    "\"main\"",
    "\"not\"",
    "\"or\"",
    "\"return\"",
    "\"then\"",
    "\"true\"",
    "\"var\"",
    "\"void\"",
    "\"while\"",
    "\"begin\"",
    "\"end\"",
    "<ID>",
    "<DIGIT>",
    "<LETTER>",
    "\"_\"",
    "<NUMBER>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"=\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\";\"",
    "\":\"",
    "\":=\"",
    "\"\"",
    "<OTHER>",
  };

}
